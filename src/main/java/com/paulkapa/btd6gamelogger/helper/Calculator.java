package com.paulkapa.btd6gamelogger.helper;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import com.paulkapa.btd6gamelogger.models.game.Tower;
import com.paulkapa.btd6gamelogger.models.game.Upgrade;

/**
 * <h4>Helper Class</h4>
 * It is used to calculate the cost modifiers for different game difficulties or modes,
 * based on the costs set for Medium difficulty, Standard game mode.
 */
public class Calculator {

    private static Scanner sc = new Scanner(System.in);

    public static void main(String args[]) throws Exception {
        String select = "reset";
        boolean promptForWrongInput = true;
        while(select != "exit") {
            if(select == "reset") {
                System.out.println("----------------------------------------------------------");
                System.out.println("1) Calculate price difference in percentage - tower cost");
                System.out.println("2) Calculate price difference in percentage - upgrade cost");
                System.out.println("3) Calculate average of values");
                System.out.println("-Type 'exit' to end program or type an option number-");
                System.out.print(" > ");
                select = "reset";
                select = sc.next().trim();
                System.out.println("----------------------------------------------------------");
            } else if(select != "c") {
                switch(select) {
                    case "1": {}
                    case "2": {
                        String inititalSelection = select;
                        String diff = "";
                        System.out.println("----------------------------------------------------------");
                        System.out.println("1) Easy");
                        System.out.println("2) Medium - default");
                        System.out.println("3) Hard");
                        System.out.println("4) CHIMPS");
                        System.out.println("-Type 'back' to go back or type an option number-");
                        System.out.print(" > ");
                        select = "reset";
                        select = sc.next().trim();
                        System.out.println("----------------------------------------------------------");
                        switch(select) {
                            case "1": {select = "1"; diff = "Easy"; break;
                            } case "2": {select = "1"; diff = "Medium"; break;
                            } case "3": {select = "1"; diff = "Hard"; break;
                            } case "4": {select = "1"; diff = "CHIMPS"; break;
                            } case "back": {select = "reset"; break;
                            } default: {select = "1"; System.out.println("Invalid option selected!"); break;}
                        }
                        if(diff != "" && inititalSelection.equals("1")) Calculator.calculatePriceDifferenceTowers(diff);
                        else Calculator.calculatePriceDifferenceUpgrades("Super Monkey", diff);
                        break;
                    } case "3": {
                        select = "reset";
                        String fileName = null;
                        boolean correct = false;
                        System.out.println("----------------------------------------------------------");
                        while(!correct) {
                            System.out.println("Input example: 'file-name.txt'");
                            System.out.println("File contents requirements: a double value on each line");
                            System.out.println("Input files (if) generated by this program that are accepted here:");
                            System.out.println("> 'output-[difficulty]-stripped.txt");
                            System.out.println("> 'output-[tower_name]-[difficulty]-stripped.txt");
                            System.out.print(" > ");
                            fileName = sc.next().trim();
                            if(fileName.substring(fileName.length() - 5, fileName.length() - 1).equals(".txt") && fileName.length() > 4) {
                                correct = true;
                                System.out.println("----------------------------------------------------------");
                                System.out.println(calculateAverage(new File(fileName)));
                                System.out.println("----------------------------------------------------------");
                            } else {
                                select = "c";
                                System.out.println("Incorrect file name. Example: > output-Easy-stripped.txt");
                                break;
                            }
                        }
                        break;
                    } case "exit": {select = "exit"; break;
                    } default: {select = "reset"; System.out.println("Invalid option selected!"); break;}
                }
                System.out.print("Type 'c' to continue!\n > ");
                select = sc.next().trim() == "reset" ? "reset" : "c";
            } else if(select != "exit" && promptForWrongInput) {
                select = "reset";
                System.out.println("Your inputs seem to be wrong. Do you agree?");
                System.out.print(" > ");
                select = sc.next().trim().toUpperCase();
                if(select.equals("YES") || select.equals("Y")) {promptForWrongInput = false; System.out.println("OK! You won't see this prompt again!");
                } else {promptForWrongInput = true; System.out.println("Sure!");}
                select = "reset";
            } else select = "reset";
            System.out.print("\033[H\033[2J");
            System.out.flush();
        }
        sc.close();
    }

    private static int[] findFraction(double arg0) {
        for(int i = 0; i < 10000; i++)
            for(int j = 1; j < 10000; j++)
                if((double)i / (double)j == arg0)
                    return new int[] {i, j};
        return null;
    }

    private static <T> ArrayList<T> removeDuplicates(ArrayList<T> list) {
        ArrayList<T> newList = new ArrayList<T>();
        for (T element : list)
            if (!newList.contains(element))
                newList.add(element);
        return newList;
    }

    private static void calculatePriceDifferenceTowers(String difficulty) throws IOException {
        System.out.println("----------------------------------------------------------");
        ArrayList<Tower[]> towers = new ArrayList<>(Tower.getDefaultTowers().values());
        ArrayList<Double> result = new ArrayList<>(0);
        result.add(0, 0d); // 'baseCost' aux cariable
        result.add(1, 0d); // 'cost' aux variable
        int initialSize = 0, finalSize = 0;
        for(Tower[] types : towers) {
            for(Tower t : types) {
                result.add(0, (double) t.getCost()); // update 'baseCost'
                System.out.println(t.getName() + ": cost=" + result.get(0)); // print 'baseCost'
                System.out.print(difficulty + ": cost="); // wait for new 'cost' input
                result.add(0, Double.parseDouble(sc.next())); // save input in 'cost'
                result.add(result.get(1) / result.get(0)); // calculate 'cost'/'baseCost' and save result
            }
        }
        result.remove(0); // remove baseCost aux variable
        result.remove(0); // remove cost aux variable
        initialSize = result.size(); // get the number of calculated items
        result = Calculator.removeDuplicates(result); // remove duplicate items
        finalSize = result.size(); // get the number of unique results
        System.out.println("----------------------------------------------------------");
        System.out.println("Entries tested = " + initialSize);
        System.out.println("Unique results = " + finalSize);
        System.out.println("----------------------------------------------------------");
        FileWriter fwr = new FileWriter(new File("output-" + difficulty + ".txt"));
        BufferedWriter bwr = new BufferedWriter(fwr);
        String output = null;
        for(Double d : result) {
            int[] elements = findFraction(d);
            output = elements[0] + "/" + elements[1] + " = " + d + "\n";
            System.out.print(output);
            bwr.write(output);bwr.newLine();bwr.flush();
        }
        System.out.println("----------------------------------------------------------");
        bwr.close();
        fwr.close();
        fwr = new FileWriter(new File("output-" + difficulty + "-stripped.txt"));
        bwr = new BufferedWriter(fwr);
        for(Double d : result) {
            output = Double.toString(d);
            bwr.write(output);bwr.newLine();bwr.flush();
        }
        bwr.close();
        fwr.close();
    }

    private static void calculatePriceDifferenceUpgrades(String towerName, String difficulty) throws Exception {
        System.out.println("----------------------------------------------------------");
        ArrayList<Upgrade[]> upgrades = new ArrayList<>(Upgrade.getUpgradesByTowerName(towerName, Upgrade.getDefaultUpgrades()));
        ArrayList<Double> result = new ArrayList<>();
        int initialSize, finalSize;
        double baseCost, cost;
        System.out.println("Upgrades for " + towerName + ": ");
        for(Upgrade[] path : upgrades) {
            for(Upgrade tier : path) {
                baseCost = (double) tier.getCost();
                System.out.println(tier.getName() + ": cost=" + baseCost);
                System.out.print(difficulty + ": cost=");
                cost = Double.parseDouble(sc.next());
                result.add(cost / baseCost);
            }
        }
        initialSize = result.size();
        result = removeDuplicates(result);
        finalSize = result.size();
        System.out.println("----------------------------------------------------------");
        System.out.println("Entries tested = " + initialSize);
        System.out.println("Unique results = " + finalSize);
        System.out.println("----------------------------------------------------------");
        FileWriter fwr = new FileWriter(new File("output-" + towerName + "-" + difficulty + ".txt"));
        BufferedWriter bwr = new BufferedWriter(fwr);
        String output;
        for(Double d : result) {
            int[] elements = findFraction(d);
            output = elements[0] + "/" + elements[1] + " = " + d + "\n";
            System.out.print(output);
            bwr.write(output);bwr.newLine();bwr.flush();
        }
        System.out.println("----------------------------------------------------------");
        bwr.close();
        fwr.close();
        fwr = new FileWriter(new File("output-" + towerName + "-" + difficulty + "-stripped.txt"));
        bwr = new BufferedWriter(fwr);
        for(Double d : result) {
            output = Double.toString(d);
            bwr.write(output);bwr.newLine();bwr.flush();
        }
        bwr.close();
        fwr.close();
    }

    private static double calculateAverage(File input) throws IOException {
        FileReader fr = new FileReader(input);
        BufferedReader br = new BufferedReader(fr);
        ArrayList<Double> entries = new ArrayList<>();
        String line;
        boolean end = false;
        while(!end) {
            line = br.readLine();
            if(line == null) end = true;
            else entries.add(Double.parseDouble(line));
        }
        br.close();
        fr.close();
        double sum = 0d;
        int count = entries.size();
        for(double entry : entries) sum += entry;
        return sum/(double) count;
    }
}