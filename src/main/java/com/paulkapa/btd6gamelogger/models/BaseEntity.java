package com.paulkapa.btd6gamelogger.models;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;

import com.google.gson.Gson;
/**
 * <b>Top level class</b>
 * <hr>
 * <p>
 * Provides easy access to {@code ID}, {@code name} and {@code type}
 * fields. Also maps these attributes to table columns with
 * respective names making use of the annotation {@code @Column(name = "")}.
 * <hr>
 * The class is annotated with {@code @MappedSuperClass}, meaning that
 * it will pass the column definitions to any othe class annotated with
 * {@code @Entity} or {@code @Table} that extends {@link BaseEntity}.
 */
@MappedSuperclass
public class BaseEntity {

    /**
     * Id column.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    private int ID;

    /**
     * Name column
     */
    @Column(name = "name")
    private String name;

    /**
     * Type column
     */
    @Column(name = "type")
    private String type;

    /**
     * Default constructor.
     */
    public BaseEntity() {
        this.name= null;
        this.type = null;
    }

    /**
     * Preferred Constructor.
     * @param name entity name field
     * @param type entity type field
     */
    public BaseEntity(String name, String type) {
        this.name = name;
        this.type = type;
    }

    /**
     * Copy constructor.
     * @param other the BaseEntity object to copy data from
     */
    public BaseEntity(BaseEntity other) {
        this.name = other.getName();
        this.type = other.getType();
    }

    /**
     * Return the instance of {@link com.paulkapa.btd6gamelogger.models.BaseEntity BaseEntity}
     * that belongs to the object calling the method.
     * @return an instance of {@link com.paulkapa.btd6gamelogger.models.BaseEntity BaseEntity}
     */
    public BaseEntity getInstance() {return this;}

    /**
     * Gets the current ID.
     * @return an int representing the current ID
     */
    public int getID() {return this.ID;}

    /**
     * Sets the current ID.
     * <p>
     * Note: It is not reommended to use this method if the object is generated by
     * a database repository, hence the ID field is set automatically to be the ID field found in
     * the table.
     * @param ID the current ID
     */
    public void setID(int ID) {this.ID = ID;}

    /**
     * Gets the current name.
     * @return a string representing the current name
     */
    public String getName() {return this.name;}

    /**
     * Sets the current name.
     * <p>
     * Note: It is not reommended to use this method if the object is generated by
     * a database repository, hence the name field is set automatically to be the name field found in
     * the table.
     * @param name the current name
     */
    public void setName(String name) {this.name = name;}

    /**
     * Checks if the current name field is not null.
     * @return true if the name field is not null, false otherwise
     */
    public boolean hasNotNullName() {return !(this.name == null) ? true : false;}

    /**
     * Checks if the current name field is not an empty, null string.
     * @return true if the name field is not an empty string, false otherwise
     */
    public boolean hasNotEmptyName() {return !this.name.trim().equals("") ? true : false;}

    /**
     * Checks if the current name field is a valid name string.
     * @return true if the name field is not null and not empty, false otherwise
     */
    public boolean checkName() {return this.hasNotEmptyName() && this.hasNotNullName() ? true : false;}

    /**
     * Gets the current type.
     * @return a string representing the current type
     */
    public String getType() {return this.type;}

    /**
     * Sets the current type.
     * <p>
     * Note: It is not reommended to use this method if the object is generated by
     * a database repository, hence the type field is set automatically to be the type field found in
     * the table.
     * @param type the current type
     */
    public void setType(String type) {this.type = type;}

    /**
     * Concatenates the attributes of this object instance into a string
     * and return it.
     * <p>
     * <b>Format example</b>: "attr1=<code>val1</code>, [...],
     * attr2=<code>val2</code>, [...], attrN=<code>valN</code>"
     * @return a string representation of the object's attributes
     */
    public String createString() {
        StringBuffer sb = new StringBuffer();
        sb.delete(0, sb.length());
        sb.append("ID=").append(this.ID);
        sb.append(", name=").append(this.name);
        sb.append(", type=").append(this.type);
        return sb.toString();
    }

    /**
     * Converts this instance into a json string.
     * @return a json string representation of the object
     */
    @Override
    public String toString() {return new Gson().toJson(this);}

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ID;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((type == null) ? 0 : type.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        BaseEntity other = (BaseEntity) obj;
        if (ID != other.ID)
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (type == null) {
            if (other.type != null)
                return false;
        } else if (!type.equals(other.type))
            return false;
        return true;
    }
}
